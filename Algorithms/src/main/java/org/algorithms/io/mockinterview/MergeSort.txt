    // Time complexity ON(LogN) Space O(N)
    private int[] data;
    private int[] tmp;
    private BiPredicate<Integer, Integer> test;
    public void sort(int[] data, BiPredicate<Integer, Integer> test) {
        if(data.length == 0)
            return;

        this.data = data;
        this.tmp = new int[data.length];
        this.test = test;

        mergeSort(0, data.length - 1);
    }

    public void mergeSort(int start, int end) {
        if(start >= end) return;

        int mid = start + (end - start) / 2;

        mergeSort(start, mid);
        mergeSort(mid + 1, end);

        merge(start, mid, end);
    }

    public void merge(int start, int mid, int end) {
        for(int i = start; i <= end; i++) {
            tmp[i] = data[i];
        }
        int i = start;
        int j = mid + 1;
        int k = start;

        while(i <= mid && j <= end) {
            if(test.test(tmp[i], tmp[j])) {
                data[k++] = tmp[i++];
            } else {
                data[k++] = tmp[j++];
            }
        }

        while(i <= mid) {
            data[k++] = tmp[i++];
        }

        while(j <= mid) {
            data[k++] = tmp[j++];
        }
    }